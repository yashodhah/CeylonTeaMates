# .github/workflows/main.yml
name: TeaMates CI/CD

on:
  push:
    branches: ['**']   # trigger on every branch

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1
  ECR_REGISTRY: 376907302485.dkr.ecr.ap-southeast-1.amazonaws.com

# -------------------------------------------------------------------
# Stage 1: compile & upload each service‚Äôs JAR
# -------------------------------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order-service, order-processing-service, notification-service]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: üî® Build ${{ matrix.service }}
        run: |
          ./mvnw -B clean package \
            -pl ${{ matrix.service }} -am \
            -DskipTests

      - name: üì¶ Upload ${{ matrix.service }} JAR
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: ${{ matrix.service }}/target/*.jar

  # -------------------------------------------------------------------
  # Stage 2: build Docker image & save as tar
  # -------------------------------------------------------------------
  docker-build:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order-service, order-processing-service, notification-service]

    steps:
      - name: üì• Download ${{ matrix.service }} JAR
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-jar
          path: artifacts/${{ matrix.service }}

      - name: üê≥ Build Docker image for ${{ matrix.service }}
        run: |
          JAR_PATH=$(ls artifacts/${{ matrix.service }}/*.jar)
          IMAGE_NAME=$ECR_REGISTRY/${{ matrix.service }}:${GITHUB_SHA}

          docker build \
            -f ./.docker/Dockerfile \  \
            --build-arg JAR_FILE=$JAR_PATH \
            -t $IMAGE_NAME \
            .

          # save the built image as a tar for the push step
          docker save $IMAGE_NAME -o image-${{ matrix.service }}.tar

      - name: üì¶ Upload Docker image tar
        uses: actions/upload-artifact@v4
        with:
          name: image-${{ matrix.service }}-tar
          path: image-${{ matrix.service }}.tar

  # -------------------------------------------------------------------
  # Stage 3: download tar, load & push to ECR
  # -------------------------------------------------------------------
  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order-service, order-processing-service, notification-service]

    steps:
      - name: üì• Download image tar for ${{ matrix.service }}
        uses: actions/download-artifact@v4
        with:
          name: image-${{ matrix.service }}-tar
          path: .

      - name: üîê Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::376907302485:role/AWS_LABS_OIDC_DEPLOYER
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üöÄ Load & push ${{ matrix.service }} to ECR
        run: |
          IMAGE_NAME=$ECR_REGISTRY/${{ matrix.service }}:${GITHUB_SHA}
          docker load -i image-${{ matrix.service }}.tar
          docker push $IMAGE_NAME
